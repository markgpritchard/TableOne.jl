var documenterSearchIndex = {"docs":
[{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"DocTestSetup = quote\n    using DataFrames\n    using StableRNGs \n\n    ENV[\"COLUMNS\"] = 100\nend","category":"page"},{"location":"#TableOne.jl","page":"TableOne.jl","title":"TableOne.jl","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"This package is designed to summarize a dataset, for example information about participants      in a study as may be needed for Table 1 of a manuscript. It exports one function,      tableone.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"tableone","category":"page"},{"location":"#TableOne.tableone","page":"TableOne.jl","title":"TableOne.tableone","text":"tableone(data, strata[, vars]; <keyword arguments>)\n\nProduce a summary table which may be used as Table 1 in a manuscript.\n\nArguments\n\ndata: A DataFrame containing the data to be included in the table\nstrata: The variable (a column in data) by which the data should be stratified    in the table\nvars: The variables to be listed in the table, defaults to Symbol.(names(data))    if not supplied\n\nKeyword arguments\n\nTypes of variables\n\nEach of these must be supplied as the same type as vars, e.g. if vars is a Vector{Symbol}      then these should each be a Vector{Symbol}. Variables supplied to one of these      arguments but not the main vars argument will not be displayed.\n\nbinvars: binary variables – variable will take one row and show number (%)    with the selected level (see binvardisplay below)\ncatvars: categorical variables – each level in the variable will be shown on    a separate line with the number (%) in that category\nnpvars: non-parametric variables – will display median [1st–3rd quartiles]\nparamvars: parametric variables – will display mean (standard deviation)\ncramvars: a variation on binvars that displays both levels in one row on the table\n\nAny variables not included in one of these arguments will be presented as      mean (standard deviation) if the contents of the variable are      <:Union{<:Number, Missing}, and as categorical otherwise.\n\nAdditional keyword arguments\n\naddnmissing=true: include the numer of records with missing values for each    variable. If true, will also display number with missing strata values\naddtestname=false: show the name of the statistical test used to calculate    p-values. This option has no effect unless pvalues == true\naddtotal=false: include a column of totals across all strata\nbinvardisplay=nothing: optionally, a Dict to choose the level to display    for binary values. Any variables not listed will use the value chosen by    maximum(skipmissing(.))\ndigits=1: number of digits to be displayed after the decimal place in means,    standard deviations and percentages\nincludemissingintotal=false: include records with missing stratification variable    in the totals column. This option has no effect if addtotal == false\npdigits=3: number of digits to be displayed after the decimal place for p-values\npvalues=false: whether to display significant test p-values for each variable    in the table\nvarnames=nothing: optionally, a Dict of names for variables different    from the column titles in data, of the form Dict(:columnname => \"name to print\").    Any variables not included will be listed by the column name\n\nSee documentation for examples. ```\n\n\n\n\n\n","category":"function"},{"location":"#Detailed-examples-of-useage","page":"TableOne.jl","title":"Detailed examples of useage","text":"","category":"section"},{"location":"#Mock-dataset-for-examples","page":"TableOne.jl","title":"Mock dataset for examples","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"We create this dataset to use in the following examples.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> using DataFrames, StableRNGs\n\njulia> rng = StableRNG(1729)\nStableRNGs.LehmerRNG(state=0x00000000000000000000000000000d83)\n\njulia> testdata = DataFrame(\n              Treatment = [ repeat([ \"A\" ], 6); repeat([ \"B\"], 6) ],\n              Age = 100 .* rand(rng, 12),\n              Sex = [ rand(rng) <.5 ? \"F\" : \"M\" for _ ∈ 1:12 ],\n              Cats = [ rand(rng) < .2 ? \"X\" : rand(rng) < .6 ? \"Y\" : \"Z\" for _ ∈ 1:12 ],\n              MissCats = [ rand(rng) < .3 ? missing : rand(rng) < .4 ? \"U\" : \"V\" for _ ∈ 1:12 ],\n              MissMeasure = [ rand(rng) < .2 ? missing : rand(rng) for _ ∈ 1:12 ])\n12×6 DataFrame\n Row │ Treatment  Age        Sex     Cats    MissCats  MissMeasure    \n     │ String     Float64    String  String  String?   Float64?       \n─────┼────────────────────────────────────────────────────────────────\n   1 │ A          72.9422    M       Y       missing         0.292097\n   2 │ A          17.0639    F       Y       V               0.297467\n   3 │ A          27.2361    F       Z       missing         0.572896\n   4 │ A          37.168     M       X       U               0.722079\n   5 │ A           1.62378   M       X       missing         0.805181\n   6 │ A          84.4942    F       X       U         missing        \n   7 │ B          26.5527    F       Y       missing   missing        \n   8 │ B          12.8692    M       Y       V               0.611862\n   9 │ B          56.0895    M       Z       V               0.463648\n  10 │ B           0.951134  M       Y       V               0.187837\n  11 │ B          13.334     M       Y       V               0.770172\n  12 │ B          85.8527    F       Z       V               0.552469","category":"page"},{"location":"#Selecting-variables-for-the-table","page":"TableOne.jl","title":"Selecting variables for the table","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"tableone takes three positional arguments: data, strata and vars. If only      data is supplied then all variables are summarized.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> using TableOne\n\njulia> tableone(testdata)\n16×3 DataFrame\n Row │ variablenames           Total        nmissing \n     │ String                  String       String   \n─────┼───────────────────────────────────────────────\n   1 │ n                       12\n   2 │ Treatment                            0\n   3 │     A                   6 (50.0)\n   4 │     B                   6 (50.0)\n   5 │ Age: mean (sd)          36.3 (31.0)  0\n   6 │ Sex                                  0\n   7 │     F                   5 (41.7)\n   8 │     M                   7 (58.3)\n   9 │ Cats                                 0\n  10 │     X                   3 (25.0)\n  11 │     Y                   6 (50.0)\n  12 │     Z                   3 (25.0)\n  13 │ MissCats                             4\n  14 │     U                   2 (25.0)\n  15 │     V                   6 (75.0)\n  16 │ MissMeasure: mean (sd)  0.5 (0.2)    2","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"This is equivalent to providing all variables in order.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, [ :Treatment, :Age, :Sex, :Cats, :MissCats, :MissMeasure ]) == tableone(testdata)\ntrue","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"To change the order of variables and change the order they are displayed, pass a Vector of      variable names as Strings or Symbols.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, [ :Sex, :Age ])\n5×3 DataFrame\n Row │ variablenames   Total        nmissing \n     │ String          String       String   \n─────┼───────────────────────────────────────\n   1 │ n               12\n   2 │ Sex                          0\n   3 │     F           5 (41.7)\n   4 │     M           7 (58.3)\n   5 │ Age: mean (sd)  36.3 (31.0)  0\n\njulia> tableone(testdata, [ \"Cats\" ])\n5×3 DataFrame\n Row │ variablenames  Total     nmissing \n     │ String         String    String   \n─────┼───────────────────────────────────\n   1 │ n              12\n   2 │ Cats                     0\n   3 │     X          3 (25.0)\n   4 │     Y          6 (50.0)\n   5 │     Z          3 (25.0)","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Note that if you provide a single variable as a String or Symbol, rather than as a Vector,      it will be interpretted as the stratification variable.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, :Cats)\n12×5 DataFrame\n Row │ variablenames           Y            Z            X            nmissing \n     │ String                  String       String       String       String   \n─────┼─────────────────────────────────────────────────────────────────────────\n   1 │ n                       6            3            3\n   2 │ Treatment                                                      0\n   3 │     A                   2 (33.3)     1 (33.3)     3 (100.0)\n   4 │     B                   4 (66.7)     2 (66.7)     0 (0.0)\n   5 │ Age: mean (sd)          24.0 (25.4)  56.4 (29.3)  41.1 (41.6)  0\n   6 │ Sex                                                            0\n   7 │     F                   2 (33.3)     2 (66.7)     1 (33.3)\n   8 │     M                   4 (66.7)     1 (33.3)     2 (66.7)\n   9 │ MissCats                                                       4\n  10 │     U                   0 (0.0)      0 (0.0)      2 (100.0)\n  11 │     V                   4 (100.0)    2 (100.0)    0 (0.0)\n  12 │ MissMeasure: mean (sd)  0.4 (0.2)    0.5 (0.1)    0.8 (0.1)    2","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Variables are automatically classified according to the data found in them. These can also      be specified with keyword argumentsbinvars, catvars, npvars, paramvars and      cramvars. These can be supplied with a vector of variable names or instead of one. ","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, [ :Treatment, :Age ]; npvars=:Age)\n5×3 DataFrame\n Row │ variablenames      Total             nmissing \n     │ String             String            String   \n─────┼───────────────────────────────────────────────\n   1 │ n                  12\n   2 │ Treatment                            0\n   3 │     A              6 (50.0)\n   4 │     B              6 (50.0)\n   5 │ Age: median [IQR]  26.9 [13.2–60.3]  0\n\njulia> tableone(testdata; binvars=:Treatment, paramvars=:Age)\n3×3 DataFrame\n Row │ variablenames   Total        nmissing \n     │ String          String       String   \n─────┼───────────────────────────────────────\n   1 │ n               12\n   2 │ Treatment: B    6 (50.0)     0\n   3 │ Age: mean (sd)  36.3 (31.0)  0\n\njulia> tableone(testdata; cramvars=[:Treatment ])\n2×3 DataFrame\n Row │ variablenames   Total            nmissing \n     │ String          String           String   \n─────┼───────────────────────────────────────────\n   1 │ n               12\n   2 │ Treatment: A/B  6/6 (50.0/50.0)  0","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Note that if you are combining the positional vars argument and the keyword arguments, any      variables not included in vars will be omitted from the table. ","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, [ :Treatment, :Age ]; npvars=:MissMeasure)\n5×3 DataFrame\n Row │ variablenames   Total        nmissing \n     │ String          String       String   \n─────┼───────────────────────────────────────\n   1 │ n               12\n   2 │ Treatment                    0\n   3 │     A           6 (50.0)\n   4 │     B           6 (50.0)\n   5 │ Age: mean (sd)  36.3 (31.0)  0","category":"page"},{"location":"#Stratification-variable","page":"TableOne.jl","title":"Stratification variable","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"A single stratification variable can be given. As above, if no variable list is supplied,      all other variables will be included in the table. You can also select which variables      you want to include in the table. ","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, \"Treatment\", [ \"Age\", \"Sex\" ])\n5×4 DataFrame\n Row │ variablenames   A            B            nmissing \n     │ String          String       String       String   \n─────┼────────────────────────────────────────────────────\n   1 │ n               6            6\n   2 │ Age: mean (sd)  40.1 (32.4)  32.6 (32.2)  0\n   3 │ Sex                                       0\n   4 │     F           3 (50.0)     2 (33.3)\n   5 │     M           3 (50.0)     4 (66.7)\n\njulia> tableone(testdata, :Treatment, :Treatment)\n4×4 DataFrame\n Row │ variablenames  A          B          nmissing \n     │ String         String     String     String   \n─────┼───────────────────────────────────────────────\n   1 │ n              6          6\n   2 │ Treatment                            0\n   3 │     A          6 (100.0)  0 (0.0)\n   4 │     B          0 (0.0)    6 (100.0)","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Totals are displayed with the addtotal argument ","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, \"Treatment\", [ \"Age\", \"Sex\" ]; paramvars=\"Age\", addtotal=true)\n5×5 DataFrame\n Row │ variablenames   A            B            Total        nmissing \n     │ String          String       String       String       String   \n─────┼─────────────────────────────────────────────────────────────────\n   1 │ n               6            6            12\n   2 │ Age: mean (sd)  40.1 (32.4)  32.6 (32.2)  36.3 (31.0)  0\n   3 │ Sex                                                    0\n   4 │     F           3 (50.0)     2 (33.3)     5 (41.7)\n   5 │     M           3 (50.0)     4 (66.7)     7 (58.3)","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Using default settings, any individual missing values in the stratification variable      are listed in the n row, then are omited from the remainder of the table.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(testdata, :MissCats, [ :Sex, :MissMeasure ])      \n5×4 DataFrame\n Row │ variablenames           V          U          nmissing \n     │ String                  String     String     String   \n─────┼────────────────────────────────────────────────────────\n   1 │ n                       6          2          4\n   2 │ Sex                                           0\n   3 │     F                   2 (33.3)   1 (50.0)\n   4 │     M                   4 (66.7)   1 (50.0)\n   5 │ MissMeasure: mean (sd)  0.5 (0.2)  0.7 (NaN)  1","category":"page"},{"location":"#P-values","page":"TableOne.jl","title":"P-values","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"P-values to compare between the stratification levels can be calculated automatically. Users      are advised to ensure they are happy with the methods used and the values calculated.     The method being used depends on the type of variable supplied. It is displayed by      selecting addtestname=true.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> tableone(\n           testdata, \n           :Sex, \n           [ :Treatment, :Age, :Cats, :MissCats, :MissMeasure ]; \n           binvars=:Treatment, npvars=:MissMeasure, \n           addnmissing=false, pvalues=true, addtestname=true\n       )\n┌ Warning: This test is only asymptotically correct and might be inaccurate for the given group size\n└ @ HypothesisTests yourpath.jl:73\n11×5 DataFrame\n Row │ variablenames              M              F              p       test\n     │ String                     String         String         String  String\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ n                          7              5\n   2 │ Treatment: B               4 (57.1)       2 (40.0)       1.0     FisherExactTest\n   3 │ Age: mean (sd)             27.9 (28.2)    48.2 (34.0)    0.276   OneWayANOVATest\n   4 │ Cats                                                     0.598   ChisqTest\n   5 │     X                      2 (28.6)       1 (20.0)\n   6 │     Y                      4 (57.1)       2 (40.0)\n   7 │     Z                      1 (14.3)       2 (40.0)\n   8 │ MissCats                                                 1.0     FisherExactTest\n   9 │     U                      1 (20.0)       1 (33.3)\n  10 │     V                      4 (80.0)       2 (66.7)\n  11 │ MissMeasure: median [IQR]  0.6 [0.4–0.7]  0.6 [0.4–0.6]  0.569   KruskalWallisTest","category":"page"},{"location":"#Categorical-variables","page":"TableOne.jl","title":"Categorical variables","text":"","category":"section"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"Categorical variables are displayed with the name of the variable on one line, then the      names of each category on a separate line beneath. Each category displays the number of      individuals in that category and the percentage of non-missing within that column. ","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"If a column in the data is formatted as a CategoricalArray then the levels in      that array will be shown in Table 1 as ordered in the array.","category":"page"},{"location":"","page":"TableOne.jl","title":"TableOne.jl","text":"julia> using CategoricalArrays, CSV, Downloads \n\njulia> url = \"http://www-eio.upc.edu/~pau/cms/rdata/csv/survival/pbc.csv\";\n\njulia> pbcdata = CSV.read(Downloads.download(url), DataFrame; missingstring = \"NA\");\n\njulia> edemaconversion = DataFrame(\n       edema = [ 0, 0.5, 1 ],\n       edemalevel = CategoricalArray([ \n            \"No edema\", \n            \"Untreated or successfully treated\", \n            \"Unsuccessfully treated\" ]; \n            ordered = true))\n3×2 DataFrame\n Row │ edema    edemalevel\n     │ Float64  Cat…\n─────┼────────────────────────────────────────────\n   1 │     0.0  No edema\n   2 │     0.5  Untreated or successfully treated\n   3 │     1.0  Unsuccessfully treated\n\njulia> leftjoin!(pbcdata, edemaconversion; on = :edema);\n\njulia> levels!(\n           pbcdata.edemalevel, \n           [ \"No edema\", \"Untreated or successfully treated\", \"Unsuccessfully treated\" ]\n       );\n\njulia> tableone(\n           pbcdata,\n           :trt,\n           [ \"age\", \"sex\", \"hepato\", \"edemalevel\", \"bili\", \"chol\", \"stage\" ];\n           addnmissing=false,\n           binvars = [ \"sex\", \"hepato\" ],\n           catvars = [ \"edemalevel\", \"stage\" ],\n           npvars = [ \"bili\", \"chol\" ],\n           digits = 2,\n           binvardisplay = Dict(\"sex\" => \"f\"),\n           varnames = Dict(\n               \"age\" => \"Age, years\",\n               \"hepato\" => \"Hepatomegaly\",\n               \"bili\" => \"Bilirubin, mg/dL\",\n               \"chol\" => \"Cholesterol, mg/dL\"\n           )\n       )\n15×3 DataFrame\n Row │ variablenames                      1                     2\n     │ String                             String                String\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ n                                  158                   154\n   2 │ Age, years: mean (sd)              51.42 (11.01)         48.58 (9.96)\n   3 │ sex: f                             137 (86.71)           139 (90.26)\n   4 │ Hepatomegaly: 1                    73 (46.2)             87 (56.49)\n   5 │ edemalevel\n   6 │     No edema                       132 (83.54)           131 (85.06)\n   7 │     Untreated or successfully tr…  16 (10.13)            13 (8.44)\n   8 │     Unsuccessfully treated         10 (6.33)             10 (6.49)\n   9 │ Bilirubin, mg/dL: median [IQR]     1.4 [0.8–3.2]         1.3 [0.72–3.6]\n  10 │ Cholesterol, mg/dL: median [IQR]   315.5 [247.75–417.0]  303.5 [254.25–377.0]\n  11 │ stage\n  12 │     1                              12 (7.59)             4 (2.6)\n  13 │     2                              35 (22.15)            32 (20.78)\n  14 │     3                              56 (35.44)            64 (41.56)\n  15 │     4                              55 (34.81)            54 (35.06)","category":"page"}]
}
